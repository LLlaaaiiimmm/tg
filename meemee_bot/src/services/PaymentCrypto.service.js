import 'dotenv/config';
import axios from 'axios';
import BigNumber from 'bignumber.js';
import { OrderService } from './Order.service.js';

export class PaymentCryptoService {
    constructor() {
        this.baseUrl = 'https://app.0xprocessing.com';
        this.api = process.env.PAYMENT_API;
        this.merchant = process.env.MERCHANT_ID || '0xMR8252827';
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞
    async createPayment({ userId, amount, payCurrency, package: pkg }) {
        try {
            const orderService = new OrderService();
            const orderId = orderService.generateOrderId('CRYPTO');

            const data = {
                merchantID: this.merchant,
                billingID: orderId,
                currency: payCurrency,
                email: 'user@meemee.bot',
                clientId: userId,
            };

            const response = await axios.post(
                `${this.baseUrl}/payment`,
                data,
                {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }
            );

            // –†–∞—Å—á—ë—Ç —Å—É–º–º—ã
            data.amountUSD = amount;
            data.amount = new BigNumber(amount)
                .div(payCurrency.includes('USDT') || payCurrency.includes('USDC') 
                    ? 1 
                    : response.data.rate)
                .toFixed(5);
            data.package = pkg;
            data.createdAt = new Date().toISOString();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
            const coinInfoResponse = await axios.get(`${this.baseUrl}/Api/CoinInfo/${payCurrency}`);
            if (new BigNumber(data.amount).isLessThan(coinInfoResponse.data.min)) {
                return { error: '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.' };
            }

            const orderData = {
                orderId,
                userId,
                input: data,
                output: response.data,
                isPaid: false,
                isFiat: false,
                package: pkg,
                amount: amount,
                currency: payCurrency
            };

            await orderService.createOrder(orderData);
            console.log(`üíé Crypto payment created: ${orderId}`);
            return orderData;
        } catch (err) {
            console.error(`‚ùå Error creating crypto payment: ${err.message}`);
            return { error: err.message };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    async checkPaymentStatus(orderId) {
        try {
            const orderService = new OrderService();
            const order = await orderService.getOrderById(orderId);
            
            if (!order) return { error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            if (order.isPaid) return { status: 'paid' };

            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 0xprocessing API
            // –ù–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ webhook
            return { status: 'pending' };
        } catch (err) {
            console.error(`‚ùå Error checking payment status: ${err.message}`);
            return { error: err.message };
        }
    }
}