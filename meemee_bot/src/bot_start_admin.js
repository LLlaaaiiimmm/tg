import 'dotenv/config';
import { Telegraf, session, Input } from 'telegraf';
import { UserService } from './services/User.service.js';
import { OrderService } from './services/Order.service.js';
import { GenerationService } from './services/Generation.service.js';
import { ADMINS } from './config.js';
import axios from 'axios';

if (!process.env.BOT_TOKEN_ADMIN) {
    console.error('‚ùå BOT_TOKEN_ADMIN not found in .env file');
    process.exit(1);
}

if (!process.env.BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN not found in .env file (needed for broadcast)');
    process.exit(1);
}

const bot = new Telegraf(process.env.BOT_TOKEN_ADMIN);
console.log(`‚úÖ Admin bot initialized with token: ${process.env.BOT_TOKEN_ADMIN?.substring(0, 10)}...`);

// –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
const mainBot = new Telegraf(process.env.BOT_TOKEN);
console.log(`‚úÖ Main bot initialized with token: ${process.env.BOT_TOKEN?.substring(0, 10)}...`);

const userService = new UserService();
const orderService = new OrderService();
const generationService = new GenerationService();

// Session middleware
bot.use(session());

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId || !ADMINS.includes(userId)) {
        return await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    }
    await next();
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
const ADMIN_MENU = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
            [{ text: 'üí≥ –ü–ª–∞—Ç–µ–∂–∏', callback_data: 'payments' }],
            [{ text: 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏', callback_data: 'generations' }],
            [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users' }],
            [{ text: 'üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤', callback_data: 'export_reports' }],
            [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'broadcast' }]
        ]
    }
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
    await ctx.reply(
        'üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å MeeMee\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        ADMIN_MENU
    );
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
    try {
        await ctx.editMessageText(
            'üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å MeeMee\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            ADMIN_MENU
        );
    } catch (err) {
        await ctx.reply('üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å MeeMee\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', ADMIN_MENU);
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('stats', async (ctx) => {
    try {
        const totalUsers = await userService.getTotalUsers();
        const paymentStats = await orderService.getPaymentStats();
        const generationStats = await generationService.getGenerationStats();

        let message = 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n';
        message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n\n`;
        
        message += `üí≥ –ü–ª–∞—Ç–µ–∂–∏:\n`;
        message += `‚îú‚îÄ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${paymentStats.total}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${paymentStats.paid}\n`;
        message += `‚îú‚îÄ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${paymentStats.unpaid}\n`;
        message += `‚îú‚îÄ –ö—Ä–∏–ø—Ç–æ: ${paymentStats.crypto}\n`;
        message += `‚îú‚îÄ –ö–∞—Ä—Ç—ã: ${paymentStats.fiat}\n`;
        message += `‚îî‚îÄ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${paymentStats.totalRevenue.toFixed(2)}‚ÇΩ\n\n`;
        
        message += `üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n`;
        message += `‚îú‚îÄ –í—Å–µ–≥–æ: ${generationStats.total}\n`;
        message += `‚îú‚îÄ –í –æ—á–µ—Ä–µ–¥–∏: ${generationStats.queued}\n`;
        message += `‚îú‚îÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: ${generationStats.processing}\n`;
        message += `‚îú‚îÄ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${generationStats.done}\n`;
        message += `‚îî‚îÄ –û—à–∏–±–æ–∫: ${generationStats.failed}`;

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in stats:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.action('payments', async (ctx) => {
    try {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

        const allOrders = await orderService.getAllOrders();
        
        const todayOrders = allOrders.filter(o => new Date(o.createdAt) >= today);
        const weekOrders = allOrders.filter(o => new Date(o.createdAt) >= weekAgo);
        const monthOrders = allOrders.filter(o => new Date(o.createdAt) >= monthAgo);

        let message = 'üí≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n';
        
        message += `üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:\n`;
        message += `‚îú‚îÄ –ó–∞–∫–∞–∑–æ–≤: ${todayOrders.length}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${todayOrders.filter(o => o.isPaid).length}\n`;
        message += `‚îî‚îÄ –í—ã—Ä—É—á–∫–∞: ${todayOrders.filter(o => o.isPaid).reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ\n\n`;
        
        message += `üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é:\n`;
        message += `‚îú‚îÄ –ó–∞–∫–∞–∑–æ–≤: ${weekOrders.length}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${weekOrders.filter(o => o.isPaid).length}\n`;
        message += `‚îî‚îÄ –í—ã—Ä—É—á–∫–∞: ${weekOrders.filter(o => o.isPaid).reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ\n\n`;
        
        message += `üìÖ –ó–∞ –º–µ—Å—è—Ü:\n`;
        message += `‚îú‚îÄ –ó–∞–∫–∞–∑–æ–≤: ${monthOrders.length}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${monthOrders.filter(o => o.isPaid).length}\n`;
        message += `‚îî‚îÄ –í—ã—Ä—É—á–∫–∞: ${monthOrders.filter(o => o.isPaid).reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ\n\n`;
        
        const cryptoOrders = allOrders.filter(o => !o.isFiat && o.isPaid);
        const fiatOrders = allOrders.filter(o => o.isFiat && o.isPaid);
        
        message += `üíé –ö—Ä–∏–ø—Ç–æ: ${cryptoOrders.length} (${cryptoOrders.reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ)\n`;
        message += `üíµ –ö–∞—Ä—Ç—ã: ${fiatOrders.length} (${fiatOrders.reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ)`;

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in payments:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
bot.action('generations', async (ctx) => {
    try {
        const generationStats = await generationService.getGenerationStats();
        const topMemes = await generationService.getTopMemes();

        let message = 'üé¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n\n';
        message += `üìä –û–±—â–∞—è:\n`;
        message += `‚îú‚îÄ –í—Å–µ–≥–æ: ${generationStats.total}\n`;
        message += `‚îú‚îÄ –í –æ—á–µ—Ä–µ–¥–∏: ${generationStats.queued}\n`;
        message += `‚îú‚îÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: ${generationStats.processing}\n`;
        message += `‚îú‚îÄ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${generationStats.done}\n`;
        message += `‚îî‚îÄ –û—à–∏–±–æ–∫: ${generationStats.failed}\n\n`;

        if (topMemes.length > 0) {
            message += `üèÜ –¢–æ–ø –º–µ–º–æ–≤:\n`;
            topMemes.forEach((meme, index) => {
                message += `${index + 1}. ${meme.memeName}: ${meme.count}\n`;
            });
        }

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in generations:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
bot.action('users', async (ctx) => {
    try {
        const totalUsers = await userService.getTotalUsers();
        const allUsers = await userService.getAllUsers();
        
        // –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏)
        const activeUsers = allUsers.filter(u => u.total_generations > 0);
        const paidUsers = allUsers.filter(u => u.paid_quota > 0 || u.total_spent > 0);

        let message = 'üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
        message += `‚îú‚îÄ –í—Å–µ–≥–æ: ${totalUsers}\n`;
        message += `‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.length}\n`;
        message += `‚îî‚îÄ –ü–ª–∞—Ç–Ω—ã—Ö: ${paidUsers.length}\n\n`;
        
        message += `üí° –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID`;

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
        
        ctx.session = ctx.session || {};
        ctx.session.waitingForUserId = true;
    } catch (err) {
        console.error('‚ùå Error in users:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
});

// –†–∞—Å—Å—ã–ª–∫–∞
bot.action('broadcast', async (ctx) => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!ctx.session) {
            ctx.session = {};
        }
        ctx.session.broadcastStep = 'content';
        
        await ctx.editMessageText(
            'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüîπ –®–∞–≥ 1/2: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n1Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n2Ô∏è‚É£ –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (caption)\n3Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML —Ä–∞–∑–º–µ—Ç–∫—É:\n<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]
                    ]
                }
            }
        );
    } catch (err) {
        console.error('‚ùå Error in broadcast:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤
bot.action('export_reports', async (ctx) => {
    try {
        await ctx.editMessageText(
            'üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'export_users' }],
                        [{ text: 'üí≥ –ü–ª–∞—Ç–µ–∂–∏', callback_data: 'export_payments' }],
                        [{ text: 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏', callback_data: 'export_generations' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                    ]
                }
            }
        );
    } catch (err) {
        console.error('‚ùå Error in export_reports:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.action('export_users', async (ctx) => {
    try {
        await ctx.answerCbQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞...');
        const allUsers = await userService.getAllUsers();
        
        let csvData = 'User ID,Username,First Name,Free Quota,Paid Quota,Total Spent,Successful Generations,Failed Generations,Created At\n';
        
        for (const user of allUsers) {
            csvData += `${user.userId},`;
            csvData += `${user.username || ''},`;
            csvData += `${user.firstName || ''},`;
            csvData += `${user.free_quota || 0},`;
            csvData += `${user.paid_quota || 0},`;
            csvData += `${user.total_spent || 0},`;
            csvData += `${user.successful_generations || 0},`;
            csvData += `${user.failed_generations || 0},`;
            csvData += `${user.createdAt || ''}\n`;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await ctx.replyWithDocument(
            {
                source: Buffer.from(csvData, 'utf-8'),
                filename: `users_export_${new Date().toISOString().split('T')[0]}.csv`
            },
            { caption: `üìä –û—Ç—á—ë—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–í—Å–µ–≥–æ: ${allUsers.length}` }
        );
        
        await ctx.reply('‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!', ADMIN_MENU);
    } catch (err) {
        console.error('‚ùå Error exporting users:', err);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π
bot.action('export_payments', async (ctx) => {
    try {
        await ctx.answerCbQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞...');
        const allOrders = await orderService.getAllOrders();
        
        let csvData = 'Order ID,User ID,Amount,Package,Method,Status,Paid,Created At\n';
        
        for (const order of allOrders) {
            csvData += `${order.orderId},`;
            csvData += `${order.userId},`;
            csvData += `${order.amount || 0},`;
            csvData += `${order.package || ''},`;
            csvData += `${order.isFiat ? 'Card' : 'Crypto'},`;
            csvData += `${order.status || ''},`;
            csvData += `${order.isPaid ? 'Yes' : 'No'},`;
            csvData += `${order.createdAt || ''}\n`;
        }
        
        await ctx.replyWithDocument(
            {
                source: Buffer.from(csvData, 'utf-8'),
                filename: `payments_export_${new Date().toISOString().split('T')[0]}.csv`
            },
            { caption: `üí≥ –û—Ç—á—ë—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º\n–í—Å–µ–≥–æ: ${allOrders.length}` }
        );
        
        await ctx.reply('‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!', ADMIN_MENU);
    } catch (err) {
        console.error('‚ùå Error exporting payments:', err);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
bot.action('export_generations', async (ctx) => {
    try {
        await ctx.answerCbQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ Redis
        const redisModule = await import('./redis.js');
        const redisClient = redisModule.default;
        const allKeys = await redisClient.keys('generation:*');
        const generations = [];
        
        for (const key of allKeys) {
            const gen = await redisClient.get(key);
            if (gen) {
                generations.push(JSON.parse(gen));
            }
        }
        
        let csvData = 'Generation ID,User ID,Meme ID,Meme Name,Name,Gender,Status,Created At,Updated At\n';
        
        for (const gen of generations) {
            csvData += `${gen.generationId},`;
            csvData += `${gen.userId},`;
            csvData += `${gen.memeId},`;
            csvData += `${gen.memeName || ''},`;
            csvData += `${gen.name || ''},`;
            csvData += `${gen.gender || ''},`;
            csvData += `${gen.status || ''},`;
            csvData += `${gen.createdAt || ''},`;
            csvData += `${gen.updatedAt || ''}\n`;
        }
        
        await ctx.replyWithDocument(
            {
                source: Buffer.from(csvData, 'utf-8'),
                filename: `generations_export_${new Date().toISOString().split('T')[0]}.csv`
            },
            { caption: `üé¨ –û—Ç—á—ë—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º\n–í—Å–µ–≥–æ: ${generations.length}` }
        );
        
        await ctx.reply('‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!', ADMIN_MENU);
    } catch (err) {
        console.error('‚ùå Error exporting generations:', err);
        console.error('Error details:', err.stack);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ' + err.message);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!ctx.session) {
            ctx.session = {};
        }
        
        if (ctx.session.waitingForUserId) {
            const userId = parseInt(ctx.message.text);
            if (isNaN(userId)) {
                return await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID');
            }
            
            const user = await userService.getUser(userId);
            if (!user) {
                return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            let message = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:\n\n`;
            message += `üìù –ò–º—è: ${user.firstName || ''} ${user.lastName || ''}\n`;
            message += `üÜî Username: @${user.username || '–Ω–µ—Ç'}\n\n`;
            message += `üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n`;
            message += `‚îú‚îÄ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: ${user.free_quota}\n`;
            message += `‚îú‚îÄ –ü–ª–∞—Ç–Ω—ã—Ö: ${user.paid_quota}\n`;
            message += `‚îú‚îÄ –í—Å–µ–≥–æ —Å–¥–µ–ª–∞–Ω–æ: ${user.successful_generations || 0}\n`;
            message += `‚îî‚îÄ –û—à–∏–±–æ–∫: ${user.failed_generations || 0}\n\n`;
            message += `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${user.total_spent || 0}‚ÇΩ\n`;
            message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleDateString('ru-RU')}`;
            
            await ctx.reply(message, ADMIN_MENU);
            delete ctx.session.waitingForUserId;
            
        } else if (ctx.session.broadcastStep === 'content') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            ctx.session.broadcastText = ctx.message.text;
            ctx.session.broadcastStep = 'button';
            
            await ctx.reply(
                'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüîπ –®–∞–≥ 2/2: –ö–Ω–æ–ø–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π?',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', callback_data: 'broadcast_add_button' }],
                            [{ text: '‚è≠Ô∏è –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏', callback_data: 'broadcast_skip_button' }],
                            [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]
                        ]
                    }
                }
            );
            
        } else if (ctx.session.broadcastStep === 'button_text') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            ctx.session.broadcastButtonText = ctx.message.text;
            ctx.session.broadcastStep = 'button_url';
            
            await ctx.reply(
                'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüîπ –°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏\n\n–ü—Ä–∏–º–µ—Ä: https://t.me/your_channel',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]
                        ]
                    }
                }
            );
            
        } else if (ctx.session.broadcastStep === 'button_url') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏
            const url = ctx.message.text;
            
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
            try {
                new URL(url);
                ctx.session.broadcastButtonUrl = url;
            } catch (err) {
                return await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showBroadcastPreview(ctx);
        }
    } catch (err) {
        console.error('‚ùå Error in text handler:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
    try {
        if (!ctx.session) {
            ctx.session = {};
        }
        
        if (ctx.session.broadcastStep === 'content') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ caption (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const caption = ctx.message.caption || '';
            ctx.session.broadcastText = caption;
            console.log(`üì∏ Photo with caption received`);
            console.log(`  Caption: "${caption}"`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            const photoFileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
            console.log(`  Photo file_id: ${photoFileId}`);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
                console.log(`üîó Getting file link...`);
                const fileLink = await ctx.telegram.getFileLink(photoFileId);
                console.log(`‚úÖ File link obtained: ${fileLink.href}`);
                
                // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                console.log(`‚¨áÔ∏è Downloading photo...`);
                const response = await axios.get(fileLink.href, { responseType: 'arraybuffer' });
                const photoBuffer = Buffer.from(response.data);
                console.log(`‚úÖ Photo downloaded: ${photoBuffer.length} bytes`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä –≤ —Å–µ—Å—Å–∏—é
                ctx.session.broadcastPhotoBuffer = photoBuffer.toString('base64');
                console.log(`‚úÖ Photo saved to session (base64 length: ${ctx.session.broadcastPhotoBuffer.length})`);
            } catch (err) {
                console.error('‚ùå Error downloading photo:', err);
                console.error('Error stack:', err.stack);
                return await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            }
            
            ctx.session.broadcastStep = 'button';
            
            await ctx.reply(
                'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüîπ –®–∞–≥ 2/2: –ö–Ω–æ–ø–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π?',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', callback_data: 'broadcast_add_button' }],
                            [{ text: '‚è≠Ô∏è –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏', callback_data: 'broadcast_skip_button' }],
                            [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]
                        ]
                    }
                }
            );
        }
    } catch (err) {
        console.error('‚ùå Error in photo handler:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// Callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.action('broadcast_add_button', async (ctx) => {
    try {
        ctx.session.broadcastStep = 'button_text';
        
        await ctx.editMessageText(
            'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüîπ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ\n\n–ü—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]
                    ]
                }
            }
        );
    } catch (err) {
        console.error('‚ùå Error:', err);
    }
});

// Callback –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
bot.action('broadcast_skip_button', async (ctx) => {
    try {
        await showBroadcastPreview(ctx);
    } catch (err) {
        console.error('‚ùå Error:', err);
    }
});

// –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
async function showBroadcastPreview(ctx) {
    try {
        const allUsers = await userService.getAllUsers();
        
        let message = 'üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏\n\n';
        message += `üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${allUsers.length}\n\n`;
        message += '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n';
        message += ctx.session.broadcastText;
        message += '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n';
        
        if (ctx.session.broadcastPhotoBuffer) {
            message += 'üì∑ –° —Ñ–æ—Ç–æ: –î–ê\n';
        }
        
        if (ctx.session.broadcastButtonText) {
            message += `üîò –ö–Ω–æ–ø–∫–∞: "${ctx.session.broadcastButtonText}"\n`;
            message += `üîó –°—Å—ã–ª–∫–∞: ${ctx.session.broadcastButtonUrl}\n`;
        }
        
        message += '\n‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?';
        
        await ctx.reply(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'broadcast_confirm' }],
                    [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in preview:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.action('broadcast_confirm', async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        if (!ctx.session || !ctx.session.broadcastText) {
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
            return;
        }

        const allUsers = await userService.getAllUsers();
        const text = ctx.session.broadcastText;
        const photoBuffer = ctx.session.broadcastPhotoBuffer;
        const buttonText = ctx.session.broadcastButtonText;
        const buttonUrl = ctx.session.broadcastButtonUrl;
        
        console.log(`\n${'='.repeat(60)}`);
        console.log(`üì§ Starting broadcast to ${allUsers.length} users`);
        console.log(`Session data check:`);
        console.log(`  - broadcastText: ${ctx.session.broadcastText ? 'EXISTS' : 'MISSING'}`);
        console.log(`  - broadcastPhotoBuffer: ${ctx.session.broadcastPhotoBuffer ? 'EXISTS' : 'MISSING'}`);
        console.log(`  - broadcastButtonText: ${ctx.session.broadcastButtonText || 'N/A'}`);
        console.log(`  - broadcastButtonUrl: ${ctx.session.broadcastButtonUrl || 'N/A'}`);
        console.log(`Text: "${text}"`);
        console.log(`Photo: ${photoBuffer ? 'YES' : 'NO'}, Button: ${buttonText ? 'YES' : 'NO'}`);
        if (photoBuffer) {
            console.log(`Photo buffer base64 length: ${photoBuffer.length}`);
            console.log(`Photo buffer sample (first 50 chars): ${photoBuffer.substring(0, 50)}...`);
        } else {
            console.log(`‚ö†Ô∏è WARNING: photoBuffer is ${photoBuffer} - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞!`);
        }
        if (buttonText && buttonUrl) {
            console.log(`Button text: "${buttonText}"`);
            console.log(`Button URL: ${buttonUrl}`);
        }
        console.log(`${'='.repeat(60)}\n`);
        
        if (!text) {
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç!', ADMIN_MENU);
            return;
        }
        
        if (allUsers.length === 0) {
            await ctx.editMessageText('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!', ADMIN_MENU);
            return;
        }
        
        let success = 0;
        let failed = 0;
        
        await ctx.editMessageText(`üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...`);
        
        for (const user of allUsers) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!user.userId) {
                    console.log(`‚ö†Ô∏è Skipping user without userId:`, user);
                    failed++;
                    continue;
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
                if (photoBuffer) {
                    console.log(`\nüì§ Sending to user ${user.userId}...`);
                    console.log(`  Converting base64 to Buffer...`);
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ Buffer
                    const photo = Buffer.from(photoBuffer, 'base64');
                    console.log(`  ‚úÖ Buffer created: ${photo.length} bytes`);
                    console.log(`  Buffer sample (first 20 bytes): ${photo.slice(0, 20).toString('hex')}`);
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è sendPhoto —è–≤–Ω–æ
                    const photoOptions = {
                        caption: text,
                        parse_mode: 'HTML'
                    };
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (buttonText && buttonUrl) {
                        console.log(`  Adding button: "${buttonText}" -> ${buttonUrl}`);
                        photoOptions.reply_markup = {
                            inline_keyboard: [
                                [{ text: buttonText, url: buttonUrl }]
                            ]
                        };
                    }
                    
                    console.log(`  Caption length: ${text.length} chars`);
                    console.log(`  Calling mainBot.telegram.sendPhoto...`);
                    console.log(`  Photo source type: ${typeof photo}, isBuffer: ${Buffer.isBuffer(photo)}`);
                    
                    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Input.fromBuffer
                    let photoInput;
                    try {
                        console.log(`  Trying Input.fromBuffer...`);
                        photoInput = Input.fromBuffer(photo);
                        console.log(`  ‚úÖ Input.fromBuffer created successfully`);
                    } catch (e) {
                        console.log(`  ‚ö†Ô∏è Input.fromBuffer failed, using { source: photo }`);
                        photoInput = { source: photo };
                    }
                    
                    console.log(`  Photo input type:`, typeof photoInput);
                    
                    await mainBot.telegram.sendPhoto(user.userId, photoInput, photoOptions);
                    console.log(`  ‚úÖ Successfully sent to ${user.userId}`);
                } else {
                    console.log(`\nüì§ Sending text message to user ${user.userId}...`);
                    
                    // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    const textOptions = { parse_mode: 'HTML' };
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (buttonText && buttonUrl) {
                        textOptions.reply_markup = {
                            inline_keyboard: [
                                [{ text: buttonText, url: buttonUrl }]
                            ]
                        };
                    }
                    
                    await mainBot.telegram.sendMessage(user.userId, text, textOptions);
                    console.log(`  ‚úÖ Successfully sent to ${user.userId}`);
                }
                
                success++;
                console.log(`‚úÖ Sent to user ${user.userId} (${success}/${allUsers.length})`);
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
                await new Promise(resolve => setTimeout(resolve, 50));
            } catch (err) {
                failed++;
                console.error(`\n‚ùå Failed to send to ${user.userId}`);
                console.error(`  Error message: ${err.message}`);
                console.error(`  Error code: ${err.code}`);
                if (err.response) {
                    console.error(`  Response description:`, err.response.description);
                    console.error(`  Response error_code:`, err.response.error_code);
                    console.error(`  Full response:`, JSON.stringify(err.response, null, 2));
                }
                console.error(`  Error stack:`, err.stack);
            }
        }
        
        console.log(`üìä Broadcast completed: ${success} success, ${failed} failed`);
        
        await ctx.reply(
            `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úîÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${success}\n‚ùå –û—à–∏–±–æ–∫: ${failed}`,
            ADMIN_MENU
        );
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.broadcastStep;
        delete ctx.session.broadcastText;
        delete ctx.session.broadcastPhotoBuffer;
        delete ctx.session.broadcastButtonText;
        delete ctx.session.broadcastButtonUrl;
    } catch (err) {
        console.error('‚ùå Error in broadcast confirm:', err);
        console.error('Error stack:', err.stack);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: ' + err.message);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
bot.on('callback_query', async (ctx) => {
    const callbackData = ctx.callbackQuery.data;
    console.log('‚ö†Ô∏è Unhandled admin callback:', callbackData);
    await ctx.answerCbQuery('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('‚ùå Admin bot error:', err);
    if (ctx) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            .catch(e => console.error('Failed to send error message:', e));
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => {
        console.log('‚úÖ MeeMee Admin bot started successfully!');
        console.log(`Bot username: @${bot.botInfo.username}`);
    })
    .catch(err => {
        console.error('‚ùå Failed to start admin bot:', err);
        process.exit(1);
    });

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
