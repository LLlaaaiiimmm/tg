import 'dotenv/config';
import { Telegraf } from 'telegraf';
import { UserService } from './services/User.service.js';
import { OrderService } from './services/Order.service.js';
import { GenerationService } from './services/Generation.service.js';
import { ADMINS } from './config.js';

if (!process.env.BOT_TOKEN_ADMIN) {
    console.error('‚ùå BOT_TOKEN_ADMIN not found in .env file');
    process.exit(1);
}

const bot = new Telegraf(process.env.BOT_TOKEN_ADMIN);
const userService = new UserService();
const orderService = new OrderService();
const generationService = new GenerationService();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId || !ADMINS.includes(userId)) {
        return await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    }
    await next();
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
const ADMIN_MENU = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
            [{ text: 'üí≥ –ü–ª–∞—Ç–µ–∂–∏', callback_data: 'payments' }],
            [{ text: 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏', callback_data: 'generations' }],
            [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users' }],
            [{ text: 'üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤', callback_data: 'export_reports' }],
            [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'broadcast' }]
        ]
    }
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
    await ctx.reply(
        'üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å MeeMee\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        ADMIN_MENU
    );
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
    try {
        await ctx.editMessageText(
            'üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å MeeMee\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            ADMIN_MENU
        );
    } catch (err) {
        await ctx.reply('üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å MeeMee\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', ADMIN_MENU);
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('stats', async (ctx) => {
    try {
        const totalUsers = await userService.getTotalUsers();
        const paymentStats = await orderService.getPaymentStats();
        const generationStats = await generationService.getGenerationStats();

        let message = 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n';
        message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n\n`;
        
        message += `üí≥ –ü–ª–∞—Ç–µ–∂–∏:\n`;
        message += `‚îú‚îÄ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${paymentStats.total}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${paymentStats.paid}\n`;
        message += `‚îú‚îÄ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${paymentStats.unpaid}\n`;
        message += `‚îú‚îÄ –ö—Ä–∏–ø—Ç–æ: ${paymentStats.crypto}\n`;
        message += `‚îú‚îÄ –ö–∞—Ä—Ç—ã: ${paymentStats.fiat}\n`;
        message += `‚îî‚îÄ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${paymentStats.totalRevenue.toFixed(2)}‚ÇΩ\n\n`;
        
        message += `üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n`;
        message += `‚îú‚îÄ –í—Å–µ–≥–æ: ${generationStats.total}\n`;
        message += `‚îú‚îÄ –í –æ—á–µ—Ä–µ–¥–∏: ${generationStats.queued}\n`;
        message += `‚îú‚îÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: ${generationStats.processing}\n`;
        message += `‚îú‚îÄ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${generationStats.done}\n`;
        message += `‚îî‚îÄ –û—à–∏–±–æ–∫: ${generationStats.failed}`;

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in stats:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.action('payments', async (ctx) => {
    try {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

        const allOrders = await orderService.getAllOrders();
        
        const todayOrders = allOrders.filter(o => new Date(o.createdAt) >= today);
        const weekOrders = allOrders.filter(o => new Date(o.createdAt) >= weekAgo);
        const monthOrders = allOrders.filter(o => new Date(o.createdAt) >= monthAgo);

        let message = 'üí≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n';
        
        message += `üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:\n`;
        message += `‚îú‚îÄ –ó–∞–∫–∞–∑–æ–≤: ${todayOrders.length}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${todayOrders.filter(o => o.isPaid).length}\n`;
        message += `‚îî‚îÄ –í—ã—Ä—É—á–∫–∞: ${todayOrders.filter(o => o.isPaid).reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ\n\n`;
        
        message += `üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é:\n`;
        message += `‚îú‚îÄ –ó–∞–∫–∞–∑–æ–≤: ${weekOrders.length}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${weekOrders.filter(o => o.isPaid).length}\n`;
        message += `‚îî‚îÄ –í—ã—Ä—É—á–∫–∞: ${weekOrders.filter(o => o.isPaid).reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ\n\n`;
        
        message += `üìÖ –ó–∞ –º–µ—Å—è—Ü:\n`;
        message += `‚îú‚îÄ –ó–∞–∫–∞–∑–æ–≤: ${monthOrders.length}\n`;
        message += `‚îú‚îÄ –û–ø–ª–∞—á–µ–Ω–æ: ${monthOrders.filter(o => o.isPaid).length}\n`;
        message += `‚îî‚îÄ –í—ã—Ä—É—á–∫–∞: ${monthOrders.filter(o => o.isPaid).reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ\n\n`;
        
        const cryptoOrders = allOrders.filter(o => !o.isFiat && o.isPaid);
        const fiatOrders = allOrders.filter(o => o.isFiat && o.isPaid);
        
        message += `üíé –ö—Ä–∏–ø—Ç–æ: ${cryptoOrders.length} (${cryptoOrders.reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ)\n`;
        message += `üíµ –ö–∞—Ä—Ç—ã: ${fiatOrders.length} (${fiatOrders.reduce((sum, o) => sum + (o.amount || 0), 0).toFixed(2)}‚ÇΩ)`;

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in payments:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
bot.action('generations', async (ctx) => {
    try {
        const generationStats = await generationService.getGenerationStats();
        const topMemes = await generationService.getTopMemes();

        let message = 'üé¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n\n';
        message += `üìä –û–±—â–∞—è:\n`;
        message += `‚îú‚îÄ –í—Å–µ–≥–æ: ${generationStats.total}\n`;
        message += `‚îú‚îÄ –í –æ—á–µ—Ä–µ–¥–∏: ${generationStats.queued}\n`;
        message += `‚îú‚îÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: ${generationStats.processing}\n`;
        message += `‚îú‚îÄ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${generationStats.done}\n`;
        message += `‚îî‚îÄ –û—à–∏–±–æ–∫: ${generationStats.failed}\n\n`;

        if (topMemes.length > 0) {
            message += `üèÜ –¢–æ–ø –º–µ–º–æ–≤:\n`;
            topMemes.forEach((meme, index) => {
                message += `${index + 1}. ${meme.memeName}: ${meme.count}\n`;
            });
        }

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in generations:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
bot.action('users', async (ctx) => {
    try {
        const totalUsers = await userService.getTotalUsers();
        const allUsers = await userService.getAllUsers();
        
        // –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏)
        const activeUsers = allUsers.filter(u => u.total_generations > 0);
        const paidUsers = allUsers.filter(u => u.paid_quota > 0 || u.total_spent > 0);

        let message = 'üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
        message += `‚îú‚îÄ –í—Å–µ–≥–æ: ${totalUsers}\n`;
        message += `‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.length}\n`;
        message += `‚îî‚îÄ –ü–ª–∞—Ç–Ω—ã—Ö: ${paidUsers.length}\n\n`;
        
        message += `üí° –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID`;

        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
        
        ctx.session = ctx.session || {};
        ctx.session.waitingForUserId = true;
    } catch (err) {
        console.error('‚ùå Error in users:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
});

// –†–∞—Å—Å—ã–ª–∫–∞
bot.action('broadcast', async (ctx) => {
    try {
        await ctx.editMessageText(
            'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                    ]
                }
            }
        );
        
        ctx.session = ctx.session || {};
        ctx.session.waitingForBroadcast = true;
    } catch (err) {
        console.error('‚ùå Error in broadcast:', err);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        ctx.session = ctx.session || {};
        
        if (ctx.session.waitingForUserId) {
            const userId = parseInt(ctx.message.text);
            if (isNaN(userId)) {
                return await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID');
            }
            
            const user = await userService.getUser(userId);
            if (!user) {
                return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            let message = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:\n\n`;
            message += `üìù –ò–º—è: ${user.firstName || ''} ${user.lastName || ''}\n`;
            message += `üÜî Username: @${user.username || '–Ω–µ—Ç'}\n\n`;
            message += `üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n`;
            message += `‚îú‚îÄ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: ${user.free_quota}\n`;
            message += `‚îú‚îÄ –ü–ª–∞—Ç–Ω—ã—Ö: ${user.paid_quota}\n`;
            message += `‚îú‚îÄ –í—Å–µ–≥–æ —Å–¥–µ–ª–∞–Ω–æ: ${user.successful_generations || 0}\n`;
            message += `‚îî‚îÄ –û—à–∏–±–æ–∫: ${user.failed_generations || 0}\n\n`;
            message += `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${user.total_spent || 0}‚ÇΩ\n`;
            message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleDateString('ru-RU')}`;
            
            await ctx.reply(message, ADMIN_MENU);
            delete ctx.session.waitingForUserId;
            
        } else if (ctx.session.waitingForBroadcast) {
            const text = ctx.message.text;
            const allUsers = await userService.getAllUsers();
            
            let success = 0;
            let failed = 0;
            
            await ctx.reply(`üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...`);
            
            for (const user of allUsers) {
                try {
                    await bot.telegram.sendMessage(user.userId, text);
                    success++;
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    await new Promise(resolve => setTimeout(resolve, 50));
                } catch (err) {
                    failed++;
                    console.error(`Failed to send to ${user.userId}:`, err.message);
                }
            }
            
            await ctx.reply(
                `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${success}\n–û—à–∏–±–æ–∫: ${failed}`,
                ADMIN_MENU
            );
            
            delete ctx.session.waitingForBroadcast;
        }
    } catch (err) {
        console.error('‚ùå Error in text handler:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => {
        console.log('‚úÖ MeeMee Admin bot started successfully!');
        console.log(`Bot username: @${bot.botInfo.username}`);
    })
    .catch(err => {
        console.error('‚ùå Failed to start admin bot:', err);
        process.exit(1);
    });

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
