import { MESSAGES, PACKAGES, SUPPORTED_CRYPTO, REFERRAL_ENABLED, REFERRAL_TYPE_KEYBOARD, ABOUT_KEYBOARD } from '../config.js';
import { createCryptoKeyboard, createChainKeyboard, createPaymentCryptoKeyboard, createAfterPaymentKeyboard } from '../screens/keyboards.js';
import { PaymentCryptoService } from '../services/PaymentCrypto.service.js';
import { PaymentFiatService } from '../services/PaymentFiat.service.js';
import { UserService } from '../services/User.service.js';
import { OrderService } from '../services/Order.service.js';
import { ReferralService } from '../services/Referral.service.js';
import { GenerationService } from '../services/Generation.service.js';

const paymentCryptoService = new PaymentCryptoService();
const paymentFiatService = new PaymentFiatService();
const userService = new UserService();
const orderService = new OrderService();
const referralService = new ReferralService();
const generationService = new GenerationService();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ö—É–ø–∏—Ç—å –≤–∏–¥–µ–æ"
export async function handleBuy(ctx) {
    try {
        // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
        const packageButtons = Object.keys(PACKAGES).map(key => {
            const pkg = PACKAGES[key];
            const discount = pkg.discount ? ` üî• -${pkg.discount}` : '';
            return [{
                text: `${pkg.emoji} ${pkg.title} - ${pkg.rub}‚ÇΩ${discount}`,
                callback_data: `select_package_${key}`
            }];
        });
        
        await ctx.editMessageText(MESSAGES.CHOOSE_PACKAGE, {
            reply_markup: {
                inline_keyboard: [
                    ...packageButtons,
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in handleBuy:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
export async function handleSelectPackage(ctx, packageKey) {
    try {
        const pkg = PACKAGES[packageKey];
        if (!pkg) {
            return await ctx.answerCbQuery('–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –≤ —Å–µ—Å—Å–∏–∏
        ctx.session = ctx.session || {};
        ctx.session.selectedPackage = packageKey;
        
        let message = `${pkg.emoji} ${pkg.title}\n\n`;
        message += `üíé –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: ${pkg.generations}\n`;
        message += `üí∞ –¶–µ–Ω–∞: ${pkg.rub}‚ÇΩ / ${pkg.usdt} USDT\n`;
        if (pkg.discount) {
            message += `üî• –°–∫–∏–¥–∫–∞: ${pkg.discount}\n`;
        }
        const pricePerVideo = (pkg.rub / pkg.generations).toFixed(2);
        message += `\nüìä –¶–µ–Ω–∞ –∑–∞ 1 –≤–∏–¥–µ–æ: ${pricePerVideo}‚ÇΩ\n\n`;
        message += `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;
        
        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üíµ –ö–∞—Ä—Ç–∞', callback_data: `pay_card_${packageKey}` }],
                    [{ text: 'üíé –ö—Ä–∏–ø—Ç–∞', callback_data: `pay_crypto_${packageKey}` }],
                    [{ text: '‚≠ê Stars (—Å–∫–æ—Ä–æ)', callback_data: 'pay_stars_soon' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in handleSelectPackage:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
export async function handlePayCard(ctx) {
    try {
        ctx.session = ctx.session || {};
        ctx.session.waitingFor = 'email';
        
        await ctx.editMessageText(
            'üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy' }]
                    ]
                }
            }
        );
    } catch (err) {
        console.error('‚ùå Error in handlePayCard:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–π
export async function handlePayCrypto(ctx) {
    try {
        const keyboard = createCryptoKeyboard();
        await ctx.editMessageText('üíé –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:', { reply_markup: keyboard });
    } catch (err) {
        console.error('‚ùå Error in handlePayCrypto:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
export async function handleCryptoSelect(ctx, crypto) {
    try {
        const chains = SUPPORTED_CRYPTO[crypto];
        if (!chains || chains.length === 0) {
            return await ctx.answerCbQuery('–≠—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        const keyboard = createChainKeyboard(crypto, chains);
        await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è ${crypto}:`, { reply_markup: keyboard });
    } catch (err) {
        console.error('‚ùå Error in handleCryptoSelect:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
export async function handleChainSelect(ctx, crypto, chain) {
    try {
        const userId = ctx.from.id;
        const payCurrency = chain.replace(/_/g, ' ');
        
        // –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
        const payment = await paymentCryptoService.createPayment({
            userId,
            amount: PACKAGES.single.usdt,
            payCurrency,
            package: 'single'
        });
        
        if (payment.error) {
            return await ctx.answerCbQuery(payment.error, { show_alert: true });
        }
        
        const { address, amount, destinationTag } = payment.output;
        
        let message = `üíé –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>${amount}</code> ${crypto}\n\n`;
        message += `üìç –ù–∞ –∞–¥—Ä–µ—Å:\n<code>${address}</code>\n\n`;
        
        if (destinationTag) {
            message += `üè∑Ô∏è Memo/Tag: <code>${destinationTag}</code>\n‚ö†Ô∏è –¢–ï–ì –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù!\n\n`;
        }
        
        message += `‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã\n`;
        message += `üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å`;
        
        const keyboard = createPaymentCryptoKeyboard(payment.orderId);
        
        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: keyboard.inline_keyboard
        });
    } catch (err) {
        console.error('‚ùå Error in handleChainSelect:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
export async function handleCheckPayment(ctx, orderId) {
    try {
        const order = await orderService.getOrderById(orderId);
        
        if (!order) {
            return await ctx.answerCbQuery('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
        }
        
        if (order.isPaid) {
            return await ctx.answerCbQuery('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!', { show_alert: true });
        }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
        
    } catch (err) {
        console.error('‚ùå Error in handleCheckPayment:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ webhook)
export async function handlePaymentSuccess(bot, orderId) {
    try {
        const order = await orderService.getOrderById(orderId);
        if (!order) return;
        
        // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
        await orderService.markAsPaid(orderId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const pkg = PACKAGES[order.package];
        await userService.addPaidQuota(order.userId, pkg.generations);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
        await referralService.processExpertCashback(order.userId, order.amount);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const keyboard = createAfterPaymentKeyboard();
        await bot.telegram.sendMessage(
            order.userId,
            MESSAGES.PAYMENT_SUCCESS,
            { reply_markup: keyboard.inline_keyboard }
        );
        
        console.log(`‚úÖ Payment ${orderId} processed successfully`);
    } catch (err) {
        console.error('‚ùå Error in handlePaymentSuccess:', err);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û –ø—Ä–æ–µ–∫—Ç–µ"
export async function handleAbout(ctx) {
    try {
        await ctx.editMessageText(MESSAGES.ABOUT, { reply_markup: ABOUT_KEYBOARD });
    } catch (err) {
        console.error('‚ùå Error in handleAbout:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
export async function handleReferral(ctx) {
    try {
        if (!REFERRAL_ENABLED) {
            return await ctx.answerCbQuery('‚è≥ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!', { show_alert: true });
        }
        
        await ctx.editMessageText(
            'üéÅ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∑–∞ –±–æ–Ω—É—Å\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:',
            { reply_markup: REFERRAL_TYPE_KEYBOARD }
        );
    } catch (err) {
        console.error('‚ùå Error in handleReferral:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
export async function handleRefUser(ctx) {
    try {
        const userId = ctx.from.id;
        const botName = process.env.BOT_NAME || 'meemee_bot';
        const refLink = referralService.generateUserReferralLink(userId, botName);
        
        await ctx.editMessageText(
            MESSAGES.REFERRAL_INFO + `\n\n${refLink}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', url: `https://t.me/share/url?url=${encodeURIComponent(refLink)}` }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'referral' }]
                    ]
                }
            }
        );
    } catch (err) {
        console.error('‚ùå Error in handleRefUser:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
export async function handleRefExpert(ctx) {
    try {
        const userId = ctx.from.id;
        const botName = process.env.BOT_NAME || 'meemee_bot';
        const refLink = referralService.generateExpertReferralLink(userId, botName);
        
        const stats = await referralService.getReferralStats(userId);
        
        let message = MESSAGES.EXPERT_REFERRAL_INFO(50) + `\n\n${refLink}\n\n`;
        message += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
        message += `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.expertReferrals}\n`;
        message += `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.totalCashback?.toFixed(2) || 0}‚ÇΩ`;
        
        await ctx.editMessageText(
            message,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', url: `https://t.me/share/url?url=${encodeURIComponent(refLink)}` }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'referral' }]
                    ]
                }
            }
        );
    } catch (err) {
        console.error('‚ùå Error in handleRefExpert:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Stars (–∑–∞–≥–ª—É—à–∫–∞)
export async function handlePayStarsSoon(ctx) {
    await ctx.answerCbQuery('‚≠ê Telegram Stars —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!', { show_alert: true });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
export async function handleProfile(ctx) {
    try {
        const userId = ctx.from.id;
        const user = await userService.getUser(userId);
        const generations = await generationService.getUserGenerations(userId);
        
        if (!user) {
            return await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', { show_alert: true });
        }
        
        const message = MESSAGES.PROFILE(user, generations);
        
        await ctx.editMessageText(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π', callback_data: 'profile_history' }],
                    [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –≤–∏–¥–µ–æ', callback_data: 'buy' }],
                    [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });
    } catch (err) {
        console.error('‚ùå Error in handleProfile:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
export async function handleProfileHistory(ctx) {
    try {
        const userId = ctx.from.id;
        const generations = await generationService.getUserGenerations(userId);
        
        if (!generations || generations.length === 0) {
            return await ctx.editMessageText(
                'üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞\n\n–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ.',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', callback_data: 'catalog' }],
                            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' }]
                        ]
                    }
                }
            );
        }
        
        let message = 'üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n\n';
        
        generations.forEach((gen, idx) => {
            const statusEmoji = gen.status === 'done' ? '‚úÖ' : gen.status === 'failed' ? '‚ùå' : gen.status === 'processing' ? '‚è≥' : 'üïê';
            const date = new Date(gen.createdAt).toLocaleString('ru-RU');
            message += `${idx + 1}. ${statusEmoji} ${gen.memeName}\n`;
            message += `   üë§ –ò–º—è: ${gen.name} (${gen.gender === 'male' ? '–ú' : '–ñ'})\n`;
            message += `   üìÖ ${date}\n`;
            
            if (gen.status === 'failed' && gen.error) {
                message += `   ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${gen.error}\n`;
            }
            message += '\n';
        });
        
        // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        };
        
        await ctx.editMessageText(message, { reply_markup: keyboard });
    } catch (err) {
        console.error('‚ùå Error in handleProfileHistory:', err);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}
