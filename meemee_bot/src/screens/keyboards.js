import { KEYBOARDS } from '../config.js';
import { loadActiveMemes } from '../utils/memeLoader.js';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export function createCatalogKeyboard(page = 0, itemsPerPage = 5) {
    const memes = loadActiveMemes();
    const start = page * itemsPerPage;
    const end = start + itemsPerPage;
    const pageMemes = memes.slice(start, end);
    
    const buttons = pageMemes.map(meme => {
        const emoji = meme.status === 'soon' ? '‚è≥ ' : 'üé¨ ';
        return [{
            text: emoji + meme.name,
            callback_data: `meme_${meme.id}`
        }];
    });
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = [];
    if (page > 0) {
        navButtons.push({
            text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data: `catalog_page_${page - 1}`
        });
    }
    if (end < memes.length) {
        navButtons.push({
            text: '‚û°Ô∏è –î–∞–ª–µ–µ',
            callback_data: `catalog_page_${page + 1}`
        });
    }
    
    if (navButtons.length > 0) {
        buttons.push(navButtons);
    }
    
    buttons.push([{
        text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: 'main_menu'
    }]);
    
    return { inline_keyboard: buttons };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
export function createCryptoKeyboard(packageKey = 'single') {
    return {
        inline_keyboard: [
            [{ text: 'üíµ USDT', callback_data: `crypto_USDT_${packageKey}` }],
            [{ text: 'üí∞ USDC', callback_data: `crypto_USDC_${packageKey}` }],
            [{ text: 'üíé TON', callback_data: `crypto_TON_${packageKey}` }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `select_package_${packageKey}` }]
        ]
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
export function createChainKeyboard(crypto, chains, packageKey = 'single') {
    const buttons = chains.map(chain => [{
        text: chain.name,
        callback_data: `chain_${crypto}_${chain.processing.replace(/\s+/g, '_')}_${packageKey}`
    }]);
    
    buttons.push([{
        text: 'üîô –ù–∞–∑–∞–¥',
        callback_data: `pay_crypto_${packageKey}`
    }]);
    
    return { inline_keyboard: buttons };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–π
export function createPaymentCryptoKeyboard(orderId) {
    return {
        inline_keyboard: [
            [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `check_payment_${orderId}` }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy' }]
        ]
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
export function createAfterPaymentKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'üé¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é', callback_data: 'catalog' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
}

export { KEYBOARDS };
