import 'dotenv/config';
import redis from './src/redis.js';

async function testRedis() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...\n');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await redis.ping();
        console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        const totalUsers = await redis.scard('all_users');
        console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
        
        if (totalUsers > 0) {
            const userIds = await redis.smembers('all_users');
            console.log(`   ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.slice(0, 5).join(', ')}${userIds.length > 5 ? '...' : ''}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (userIds.length > 0) {
                const firstUserId = userIds[0];
                const userData = await redis.get(`user:${firstUserId}`);
                if (userData) {
                    const user = JSON.parse(userData);
                    console.log(`\n   –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${firstUserId}):`);
                    console.log(`   - Username: @${user.username || '–Ω–µ—Ç'}`);
                    console.log(`   - –ò–º—è: ${user.firstName || '–Ω–µ—Ç'}`);
                    console.log(`   - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${user.free_quota}`);
                    console.log(`   - –ü–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${user.paid_quota}`);
                } else {
                    console.log(`   ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${firstUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                }
            }
        } else {
            console.log('   ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        console.log('\nüé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:');
        const genKeys = await redis.keys('generation:*');
        console.log(`   –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${genKeys.length}`);
        
        if (genKeys.length > 0) {
            console.log(`   –ö–ª—é—á–∏: ${genKeys.slice(0, 3).join(', ')}${genKeys.length > 3 ? '...' : ''}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        console.log('\nüí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤:');
        const orderKeys = await redis.keys('order:*');
        console.log(`   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orderKeys.length}`);
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
        console.error('Stack:', err.stack);
    } finally {
        await redis.quit();
        process.exit(0);
    }
}

testRedis();
